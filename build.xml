<project xmlns:artifact="urn:maven-artifact-ant">
	<property name="build.dir" value="${basedir}/BUILD"/>
	<property name="po.dir" value="."/>
	
	<property file="${build.dir}/i18n.properties" />
	<property name="movesrc" value="${work.dir}/eclipse" />
	<property name="movedest" value="${work.dir}/modules" />
	<property name="maven.version" value="2.0.9" />
	
	<!-- Target locations: -->
	<property name="target.dir" location="${build.dir}/target" />
	<property name="prop.dir" value="${target.dir}/prop" />


	<import file="${build.dir}/maven-artifact-ant.xml" />
	
	<!-- Define the Ant-Contrib and Tennera Ant Gettext tasks, using Maven 
	to resolve dependencies: -->
	<target name="-initTaskDefs" depends="-init-maven" unless="taskdefs.done">
		<!-- Maven dependencies  -->
		<artifact:pom file="${build.dir}/pom.xml" id="maven.project" />
		<artifact:dependencies pathId="dependency.classpath" useScope="runtime" type="jar">
			<pom refid="maven.project" />
		</artifact:dependencies>

		<!-- pick up the "for" task from ant-contrib -->
		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="dependency.classpath" />
		<!--<taskdef name="prop2po" classname="org.fedorahosted.tennera.antgettext.Prop2PoTask" classpathref="dependency.classpath" />-->
		<taskdef resource="org/fedorahosted/tennera/antgettext/antlib.xml" classpathref="dependency.classpath" />
		<property name="taskdefs.done" value="true" />
	</target>

	<target name="clean" description="Remove generated files (except pot)">
		<delete dir="${work.dir}"/>
		<delete dir="${target.dir}"/>
	</target>

	<target name="deletepot" description="Remove all pot files">
		<delete dir="${po.dir}" includes="**/*.pot" />
	</target>

	<target name="deletepo" description="Remove all po files for a locale (-Ddelete.locale=xx)">
		<fail message="use -Ddelete.locale=xx to set locale to delete">
			<condition>
				<not><isset property="delete.locale" /></not>
			</condition>
		</fail>
		<delete dir="${po.dir}" includes="**/${delete.locale}.po" />
	</target>

	<target name="-init" depends="-initTaskDefs">
<!--
		<mkdir dir="${po.dir}"/>
-->
	</target>


	<target name="debug" depends="-initTaskDefs" description="Outputs some debugging information">
		<!-- get the source compile classpath in a printable form -->
		<pathconvert pathsep="${line.separator}|   |__ " property="echo.dependency.classpath" refid="dependency.classpath">
		</pathconvert>
		<echo message="|__ dependency.classpath path" />
		<echo message="|   |" />
		<echo message="|   |__ ${echo.dependency.classpath}" />
	</target>







	<target name="prop2pot" depends="-init"
		description="Extract translation templates (POT) from the JBoss Tools English properties files">
		<!-- 
			Paths under srcroot look like: ${module}/plugins/${plugin}/{src,src/main,jbosscore,...}
			TODO the includes and the related regex are too complicated,
			because we have to look in too many directories to find properties files.
			See https://jira.jboss.org/jira/browse/JBIDE-2972
			We can't simply say */plugins/*/*/**/*.properties lest we pick 
			up bin directories, etc.
		
			NB Leaving out */features/*/feature.properties (also affects
			regexpmapper below) 
		-->
		<prop2pot srcDir="${jbosstoolssrc}" dstDir="${po.dir}" 
			whenEmptyString="${prop2pot_whenEmptyString}"
			includesfile="${build.dir}/prop2potincludes.txt">
			<!-- we currently need to include properties from the following base directories:
				src/main
				src
				jbosscore
				jbossui
				resources
				[removed] template-src (but *not* templates)
				NB Maven conventions would also require:
				src/main/resources
			-->			
			<chainedmapper>
				<!-- rename to module~pluginID-org.jboss.ide.*~org.jboss.ide.*.pot -->
				
				<!-- from/to params are defined in i18n.properties -->
				<regexpmapper 
					handledirsep="true" 
					from="${prop2pot.regex}" 
					to="${prop2pot.replace}" />
				<filtermapper>
					<!-- org/jboss/ide/* -> org.jboss.ide.* -->
					<replacestring from="${file.separator}" to="."/>
					<!-- rename to module/pluginID-org.jboss.ide.*/org.jboss.ide.*.pot -->
					<replacestring from="~" to="/"/>
				</filtermapper>
			</chainedmapper>
		</prop2pot>
	</target>




	<!-- autogenerated "translations" -->
	<target name="en" depends="-init" description="Generate English PO files from POT files">
	   		<pot2en srcDir="${po.dir}" dstDir="${target.dir}/po" locale="en" />
	</target>
	<target name="qps" depends="-init" description="Generate Pseudo-translation PO files for qps locale from POT files">
	   		<pot2en srcDir="${po.dir}" dstDir="${target.dir}/po" locale="qps" pseudo="true" />
	</target>

	<target name="en_AA" depends="-init" description="Generate Pseudo-translation PO files for en_AA locale from POT files">
	   		<pot2en srcDir="${po.dir}" dstDir="${target.dir}/po" locale="en_AA" pseudo="true" />
	</target>

	<target name="po" depends="en, qps, en_AA" description="Generates po files for all pseudolocales">
		<!-- TODO Instead of hard-coding locale ids, get them from i18n.properties and iterate -->
	</target>





	<target name="msgmerge" description="Merges updated English text from pot files to po files">
		<apply executable="msgmerge" failonerror="true" failifexecutionfails="true" dest="${po.dir}">
			<arg value="--quiet"/>
			<arg value="--update"/>
			<srcfile />
			<targetfile />
			
			<fileset dir="${po.dir}" includes="**/*.po" />
<!-- Only for testing:
			<fileset dir="./target/po" includes="**/*.po" />
-->
			<!-- Turns module/plugins-org.jboss.package-org.jboss.Messages/*.po into 
				 module/plugins-org.jboss.package-org.jboss.Messages/org.jboss.Messages.pot -->
			<mapper type="regexp" from="${po2pot.regex}" to="${po2pot.replace}" />
		</apply>
	</target>
	
	<target name="msgcmp" description="Checks po files against their pot files (eg for missing messages)">
		<apply executable="msgcmp" failonerror="true" failifexecutionfails="true" dest="${po.dir}">
			<srcfile />
			<targetfile />
			
			<fileset dir="${po.dir}" includes="**/*.po" />
<!-- Only for testing:
			<fileset dir="./target/po" includes="**/*.po" />
-->
			<!-- Turns module/org.jboss.package-org.jboss.Messages/*.po into 
				 module/org.jboss.package-org.jboss.Messages/org.jboss.Messages.pot -->
			<mapper type="regexp" from="${po2pot.regex}" to="${po2pot.replace}" />
		</apply>
	</target>
	
	
	
	
	<!-- to be removed -->
	
	<!-- FIXME Generated properties should go to same src dir as default locale properties -->
	<target name="po2prop" depends="-init" description="Generate Java properties files from translated PO files">
		<mkdir dir="${prop.dir}" />
		<po2prop srcDir="${po.dir}" dstDir="${prop.dir}" failonnull="true">
			<unflattenmapper />
		</po2prop>	
		<po2prop srcDir="./target/po" dstDir="${prop.dir}" failonnull="true">
			<unflattenmapper />
		</po2prop>	
	</target>





	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: foreachlocale		  
		 = = = = = = = = = = = = = = = = = -->
	<macrodef name="foreachlocale">
		<attribute name="task" />
		<sequential>
		<!-- for each configured locale (in i18n.properties) -->
			<for param="locale" list="${locales}">
				<sequential>
					<antcall target="@{task}" inheritall="true">
						<param name="locale" value="@{locale}"/>
					</antcall>
				</sequential>
			</for>
		</sequential>
	</macrodef>
	
	


	
	<!--
	This is fairly useless, since it just fails on the first missing string.  
	Far better to use gettext tools.
	-->
	
	<target name="checkpropsall" depends="-init" description="Checks langpacks for completeness">
		<foreachlocale task="checkprops"/>
	</target>
	
	<target name="checkprops" description="Check langpacks for completeness for one locale">
		<verifyprop
			dir1="${jbosstoolssrc}"
			dir2="${jbosstoolssrc}"
			failOnNull="true"
			includesfile="${build.dir}/prop2potincludes.txt"
			keysOnly="true"
		>
			<globmapper from="*.properties" to="*_${locale}.properties"/>
		</verifyprop>
	</target>






	
	<!--
	Extracts binary plugin dirs/jars from zip files, and renames them to remove version numbers.
	-->
	<target name="extractzips" depends="-init">
		<mkdir dir="${work.dir}"/>
		<unzip src="${jbosstoolszip}" dest="${work.dir}">
			<patternset>
				<include name="**/*.properties"/>
				<exclude name="**/*_*.properties"/>
				<include name="eclipse/plugins/*/*.jar"/>
				<include name="eclipse/plugins/*.jar"/>
				<!-- We don't really need to extract such deep jars:
				<include name="eclipse/plugins/**/*.jar"/>
				-->
			</patternset>
		</unzip>
		<unzip src="${langpackzip}" dest="${work.dir}">
			<patternset>
				<include name="**/*.properties"/>
				<include name="eclipse/plugins/**/*.jar"/>
			</patternset>
			<!-- map langpack (*.nl) plugins to overlay their hosts -->
			<regexpmapper from="(eclipse/[^/]+/[^_]+)[.]nl(_[^/]*)?(.*)" to="\1\3"/>
		</unzip>
		
		<!-- rename all plugin/feature dirs/jars to remove version number -->
		<foreach
			param="bundle"
			target="-stripversion">
			<path>
				<union>
					<dirset dir="${work.dir}">
						<include name="eclipse/plugins/*"/>
						<include name="eclipse/features/*"/>
					</dirset>
					<fileset dir="${work.dir}">
						<include name="eclipse/plugins/*.jar"/>
						<include name="eclipse/features/*.jar"/>
					</fileset>
				</union>
			</path>
		</foreach>
	</target>

	<!--
	Removes version number from a single plugin/feature jar or directory
	-->
	<target name="-stripversion">
		<property name="regex" value="^(${work.dir}/eclipse/[^/]+/[^/_]+)(_[^/]+?)?([.]jar)?$" />
		<propertyregex 
			property="dest" 
			input="${bundle}"
			regexp="${regex}"
			select="\1\3"
			/>
		<move file="${bundle}" tofile="${dest}" />
	</target>
	
	<!-- Extracts and deletes all the plugin jars in an eclipse directory hierarchy -->
	<target name="extractjars" depends="-init">
		<foreach
			param="jar"
			target="-extractjar">
			<path>
				<fileset dir="${work.dir}">
					<include name="eclipse/plugins/**/*.jar"/>
				</fileset>
			</path>
		</foreach>
	</target>
	
	<target name="-extractjar">
		<!-- (_[^/]+)? tries to remove a version number, but isn't really needed if stripversion runs first -->
		<property name="regex" value="^(${work.dir}/eclipse/plugins/[^/_]+)(_[^/]+)?(/.*)?[.]jar$" />
		<propertyregex 
			property="jardest" 
			input="${jar}"
			regexp="${regex}"
			select="\1"
			/>
		<unzip src="${jar}" dest="${jardest}">
			<patternset>
				<include name="**/*.properties"/>
			</patternset>
		</unzip>
		<delete file="${jar}"/>
	</target>
	
	<!-- Goes through a collection of features and plugins in ${movesrc},
	and puts them into ${movedest} by module.  Which module is decided by looking for the
	plugin under ${jbosstoolssrc} 
	-->
	<target name="movetomodules">
		<mkdir dir="${movedest}"/>
		<foreach
			param="bundledir"
			target="-movetomodule">
			<path>
				<dirset dir="${movesrc}">
					<include name="*/*"/>
				</dirset>
			</path>
		</foreach>
	</target>
	
	<target name="-movetomodule">
		<!-- bundle is features/feature.id or plugins/plugin.id -->
		<propertyregex property="bundle" input="${bundledir}" regexp="${movesrc}/" replace="" />
		<pathconvert property="srcdir" setonempty="false" pathsep=";">
			<path>
				<dirset dir="${jbosstoolssrc}">
					<include name="*/${bundle}"/>
				</dirset>
			</path>
		</pathconvert>
		<fail message="too many src modules for ${bundle}: ${srcdir}">
			<condition>
				<contains string="${srcdir}" substring=";"/>
			</condition>
		</fail>
		
		<if>
			<isset property="srcdir"/>
			<then>
				<propertyregex property="module" input="${srcdir}" regexp="^${jbosstoolssrc}/([a-zA-Z]+)" replace="\1" />
				<fail message="regex should have matched">
					<condition>
						<not><isset property="module" /></not>
					</condition>
				</fail>
				<echo message="move ${movesrc}/${bundle} to ${movedest}/${module}"/><!--/${bundle} -->
				<move todir="${movedest}/${module}"> <!--/${bundle} -->
					<fileset dir="${movesrc}/${bundle}"/>
				</move>
			</then>
			<else>
				<echo message="WARN: can't find src module for ${bundle}" level="warning"/> 
			</else>
			
		</if>
	</target>

	<!-- to be removed -->

	<target name="prop2po">
		<prop2po srcDir="${work.dir}/modules" dstDir="${po.dir}" locales="${prop2po.locales}" includes="**/*.properties">
			<chainedmapper>
				<!-- rename to module~pluginID-org.jboss.ide.*~org.jboss.ide.*.pot -->
				
				<!-- from/to params are defined in i18n.properties -->
				<regexpmapper 
					handledirsep="true" 
					from="${prop2po_regex_from}" 
					to="${prop2po_regex_to}" />
				<filtermapper>
					<!-- org/jboss/ide/* -> org.jboss.ide.* -->
					<replacestring from="${file.separator}" to="."/>
					<!-- rename to module/pluginID-org.jboss.ide.*/org.jboss.ide.*.pot -->
					<replacestring from="~" to="/"/>
				</filtermapper>
			</chainedmapper>
		</prop2po>
	</target>

	
	<property file="${build.dir}/local.properties" />

	<target name="fuzzy">
		<mkdir dir="${fuzzy.dest}"/>
		<apply executable="msgattrib" 
			failonerror="false" 
			failifexecutionfails="true" 
			dest="${fuzzy.dest}" 
			force="true">
			<arg value="${fuzzy.arg}"/>
			<srcfile />
			<arg value="--output-file"/>
			<targetfile />
			
			<fileset dir="${fuzzy.src}" includes="**/${fuzzy.locale}.po" />
			<identitymapper/>
		</apply>
	</target>
	
	<target name="import" depends="clean,extractzips,extractjars,movetomodules,import2po">
	</target>
	
	<target name="import2po" depends="-init">
		<mkdir dir="${work.dir}"/>

		<!-- for each configured module (in i18n.properties) -->
		<for param="module" list="${modules}">
			<sequential>
				<prop2gettext 
					srcdir="${work.dir}/modules/@{module}" 
					dstdir="${po.dir}/@{module}" 
					locales="${import.locale}" 
					po="true" 
					pot="false"
				/>
			</sequential>
		</for>
	</target>
	
	<target name="prop2gettext" depends="-init">
		<for param="module" list="${modules}">
			<sequential>
				<mkdir dir="./@{module}"/>
				<property name="propSrc" value="${jbosstoolssrc}"/>
				<property name="dstDir" value="${po.dir}"/>
				<property name="generatePO" value="true"/>
				<property name="generatePOT" value="true"/>
				<prop2gettext 
					srcdir="${propSrc}/@{module}" 
					dstdir="./@{module}" 
					locales="${locales}" 
					po="${generatePO}" 
					pot="${generatePOT}"
					includesfile="${build.dir}/prop2gettextincludes.txt"
				/>
			</sequential>
		</for>
	</target>
	
	<target name="gettext2prop" depends="-init">
		<for param="module" list="${modules}">
			<sequential>
				<mkdir dir="${work.dir}/prop/@{module}"/>
				<gettext2prop 
					srcdir="${po.dir}/@{module}" 
					propsrcdir="${jbosstoolssrc}/@{module}"
					dstdir="${work.dir}/prop/@{module}" 
					locales="${locales}" 
					includesfile="${build.dir}/prop2gettextincludes.txt"
				/>
			</sequential>
		</for>
	</target>
	


	<!-- = = = = = = = = = = = = = = = = =
		  macrodef: foreachmodule		  
		 = = = = = = = = = = = = = = = = = 
	<macrodef name="foreachmodule">
	  <attribute name="task" />
	  <sequential>
		<! - - for each configured module (in i18n.properties) - - >
		<for param="module" list="${modules}">
			<sequential>
				<antcall target="@{task}" inheritall="true">
					<param name="module" value="@{module}"/>
				</antcall>
			</sequential>
		</for>
	  </sequential>
	</macrodef>
		 -->
<!--
	<target name="prop2gettext" depends="-init">
		<foreachmodule task="-prop2gettext"/>
	</target>
	
	<target name="-prop2gettext" depends="-init">
		<mkdir dir="./${module}"/>
		<property name="propSrc" value="${jbosstoolssrc}"/>
		<property name="dstDir" value="${po.dir}"/>
		<property name="generatePO" value="true"/>
		<property name="generatePOT" value="true"/>
		<prop2gettext 
			srcdir="${propSrc}/${module}" 
			dstdir="./${module}" 
			locales="${locales}" 
			po="${generatePO}" 
			pot="${generatePOT}"
			includesfile="${build.dir}/prop2gettextincludes.txt"
		/>
	</target>
	

	<target name="gettext2prop" depends="-init">
		<foreachmodule task="-gettext2prop"/>
	</target>
	
	<target name="-gettext2prop" depends="-init">
		<mkdir dir="${work.dir}/prop/${module}"/>
		<gettext2prop 
			srcdir="${po.dir}/${module}" 
			propsrcdir="${jbosstoolssrc}/${module}"
			dstdir="${work.dir}/prop/${module}" 
			locales="${locales}" 
			includesfile="${build.dir}/prop2gettextincludes.txt"
		/>
	</target>
-->	

</project>
